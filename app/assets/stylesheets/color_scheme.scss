// add support for gray and blue gray
$colors: map_merge($colors, ("gray": map_get($colors, "grey")));
$colors: map_merge($colors, ("blue-gray": map_get($colors, "blue-grey")));

@mixin define_classes_based_on_color_scheme($color) {
  // primary-color: applies main color to an element as background-color
  // primary-color-on-hover: applies primary-color but only when element is
  //                         hovered on
  .primary-color,
  .primary-color-on-hover:hover {
    background-color: $color !important;
  }

  // highlight-color-text: applies main color to an element as text-color
  // highlight-color-text-on-hover-trigger: applies main color to an element as
  //                                        as text-color when a parent element
  //                                        with class .color-trigger is hovered
  //                                        on
  .highlight-color-text,
  .color-trigger:hover .highlight-color-text-on-hover-trigger {
    color: $color !important;
  }
}

@mixin define_classes_based_on_font_color($color) {
  // primary-color-text: applies font color to an element as text-color
  // primary-color-text-on-hover: applies primary-color-text but only when an
  //                              element is hovered on
  // primary-color-text-on-hover-trigger: applies font color to an element as
  //                                      text-color when a parent element with
  //                                      class .color-trigger is hovered on
  .primary-color-text,
  .primary-color-text-on-hover:hover,
  .color-trigger:hover .primary-color-text-on-hover-trigger {
    color: $color !important;
  }
  // highlight-color-on-hover-trigger: applies font color to an element as
  //                                   background-color when a parent element
  //                                   with class .color-trigger is hovered on
  .color-trigger:hover .highlight-color-on-hover-trigger {
    background-color: $color !important;
  }
}

// set up color schemes
body.color-scheme {

  @each $color_name, $color in $colors {
    @each $color_type, $color_value in $color {
      @if $color_type == "base" {
        &.primary-#{$color_name} {
          @include define_classes_based_on_color_scheme($color_value);
        }
      }
      @else if $color_name != "shades" {
        &.primary-#{$color_name}.primary-#{$color_type} {
          @include define_classes_based_on_color_scheme($color_value);
        }
      }
    }
  }

  // mapping shades
  @each $color, $color_value in $shades {
    &.primary-#{$color} {
      @include define_classes_based_on_color_scheme($color_value);
    }
  }

  // mapping our two text colors: black and white
  &.primary-black-text {
    @include define_classes_based_on_font_color(#000000);
  }
  &.primary-white-text {
    @include define_classes_based_on_font_color(#FFFFFF);
  }
}

// TEXT: Increase color contrast
.text-color-contrast {
  text-shadow:
    0px 0px 2px rgba(0,0,0,0.5),
    0 2px 2px rgba(0, 0, 0, 0.14),
    0 1px 5px rgba(0, 0, 0, 0.12),
    0 3px 1px rgba(0, 0, 0, 0.2);
}
// NAVIGATION: Invert color of logo if black text
body.color-scheme.primary-black-text nav a.brand-logo img {
  filter: invert(1);
  -webkit-filter: invert(1);
  -moz-filter: invert(1);
  -o-filter: invert(1);
  -ms-filter: invert(1);
}
// NAVIGATION: Brand inherits color
nav a.brand-logo { color: inherit; }
// NAVIGATION: Icons inherit color
nav ul a, nav a { color: inherit; }
